#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of ALA ansible scripts
#
# TODO Licence

DOCUMENTATION = '''
---
module: apache_vhost
short_description: Add or remove an Apache virtual host to the apache sites-available directory.
description:
   - Add or remove an Apache virtual host.
   - If a new vhost is added then it will still need to be enabled before it can be accessed.
   - Debian and Ubuntu only
version_added: "1.8.1"
options:
  name:
    description:
      - hostname of the virtual host to add or remove
    required: true
    default: null
  filename:
    description:
      - if a new vhost is to be created, this filename will be used, defaults to the vhost value
    required: false
    default: None
  state:
    description:
      - The vhost state
      - absent is not current supported, use a2dissite instead?
    required: false
    default: present
    choices: [ "present", "absent" ]
notes:
   - This module uses I(python-augeas), a Python Augeas binding library. You must ensure that python-agueas is installed
     on the host before using this module.
requirements: [ python-augeas ]
author: Simon Bear
'''

EXAMPLES = '''
# Create a new virtual host with hostname app.example.com
- apache_vhost: name=app.exmaple.com

# Create a new virtual host with hostname app.example.com
- apache_vhost: name=app.exmaple.com filename=app-example state=present
'''

try:
    import augeas
except ImportError:
    augeas_found = False
else:
    augeas_found = True


class NotSupportedError(Exception):
    pass

DEFAULT_SERVER_ADMIN_EMAIL = 'support@ala.org.au'
DEFAULT_DOCUMENT_ROOT = '/srv/%(vhost)s/www/'


def load_augeas_for_file(root="/etc/apache2/sites-available", lens="httpd.lns", filename="*.conf", check_mode=False):
    aug = augeas.Augeas(root, None, augeas.Augeas.NO_LOAD | augeas.Augeas.NO_MODL_AUTOLOAD | (
        augeas.Augeas.SAVE_NOOP if check_mode else augeas.Augeas.SAVE_BACKUP))
    aug.add_transform(lens, filename)
    aug.load()
    return aug


def ensure_vhost_exists(aug, vhost, filename):
    if not filename:
        filename = vhost

    existing = aug.match('/files//VirtualHost[directive="ServerName" and directive/arg="%(vhost)s"]' % locals())

    if len(existing) == 0:
        # Add a vhost with some default settings

        # Create vhost in filename listening on all IPs, port 80
        aug.set("/files/%(filename)s.conf/VirtualHost/arg" % locals(), "*:80")
        # Set ServerName directive
        aug.set("/files/%(filename)s.conf/VirtualHost/directive[1]" % locals(), "ServerName")
        aug.set("/files/%(filename)s.conf/VirtualHost/directive[1]/arg" % locals(), vhost)
        # Set ServerAdmin directive
        aug.set("/files/%(filename)s.conf/VirtualHost/directive[2]" % locals(), "ServerAdmin")
        aug.set("/files/%(filename)s.conf/VirtualHost/directive[2]/arg" % locals(), DEFAULT_SERVER_ADMIN_EMAIL)
        #Set DocumentRoot directive
        aug.set("/files/%(filename)s.conf/VirtualHost/directive[3]" % locals(), "DocumentRoot")
        aug.set("/files/%(filename)s.conf/VirtualHost/directive[3]/arg" % locals(), DEFAULT_DOCUMENT_ROOT % locals())
        #Set ErrorLog
        aug.set("/files/%(filename)s.conf/VirtualHost/directive[4]" % locals(), "ErrorLog")
        aug.set("/files/%(filename)s.conf/VirtualHost/directive[4]/arg" % locals(), "${APACHE_LOG_DIR}/error.log")
        #Set LogLevel
        aug.set("/files/%(filename)s.conf/VirtualHost/directive[5]" % locals(), "LogLevel")
        aug.set("/files/%(filename)s.conf/VirtualHost/directive[5]/arg" % locals(), "warn")
        #Set Access log
        aug.set("/files/%(filename)s.conf/VirtualHost/directive[6]" % locals(), "CustomLog")
        aug.set("/files/%(filename)s.conf/VirtualHost/directive[6]/arg[1]" % locals(), "${APACHE_LOG_DIR}/access.log")
        aug.set("/files/%(filename)s.conf/VirtualHost/directive[6]/arg[2]" % locals(), "combined")


def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True),
            filename=dict(default=None, required=False),
            state=dict(default="present", choices=["absent", "present"]),
        ),
        supports_check_mode=True
    )

    vhost = module.params["name"]
    filename = module.params["filename"]
    state = module.params["state"]

    try:
        aug = load_augeas_for_file()
    except Exception, e:
        module.fail_json(msg="unable to connect to Augeas: %s" % e)
        return

    if state == 'present':
        ensure_vhost_exists(aug, vhost, filename)
    elif state == 'absent':
        module.fail_json(msg="state=absent is not implemented yet, maybe just a2dissite %(filename)s instead?" % locals())
        return

    try:
        aug.save()
        saved = aug.get("/augeas/events/saved")
        errors = aug.get("/augeas//errors")
        aug.close()
        changed = True if saved else False
        module.exit_json(changed=True if saved else False, name=vhost, saved=saved, errors=errors)
    except Exception, e:
        module.fail_json(msg="exception while performing augeas operations: %s" % e)

# import module snippets
from ansible.module_utils.basic import *

main()
