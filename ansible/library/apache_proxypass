#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of ALA ansible scripts
#
# TODO Licence

DOCUMENTATION = '''
---
module: apache_proxypass
short_description: Add or remove a proxy pass entry to a virtual host
description:
   - Add or remove a proxy pass entry to a virtual host
   - Automatically adds a proxypassreverse for http destinations
   - Debian and Ubuntu only
version_added: "1.8.1"
options:
  name:
    description:
      - hostname of the virtual host to add or remove
    required: true
    default: None
  src:
    description:
      - the proxypass source path
    required: true
    default: None
  dest:
    description:
      - the proxypass destination
    required: true
    default: None
  state:
    description:
      - The proxypass state
      - absent is not current supported, use a2dissite instead?
    required: false
    default: present
    choices: [ "present", "absent" ]
notes:
   - This module uses I(python-augeas), a Python Augeas binding library. You must ensure that python-augeas is installed
     on the host before using this module.
requirements: [ python-augeas ]
author: Simon Bear
'''

EXAMPLES = '''
# Add a reverse proxy entry from /foo on app.example.com to http://localhost:8080/foo
- apache_proxypass: name=app.exmaple.com src=/foo dest=http://localhost:8080/foo state=present
'''

try:
    import augeas
except ImportError:
    augeas_found = False
else:
    augeas_found = True


def load_augeas_for_file(root="/etc/apache2/sites-available", lens="httpd.lns", filename="*.conf", check_mode=False):
    aug = augeas.Augeas(root, None, augeas.Augeas.NO_LOAD | augeas.Augeas.NO_MODL_AUTOLOAD | (
        augeas.Augeas.SAVE_NOOP if check_mode else augeas.Augeas.SAVE_BACKUP))
    aug.add_transform(lens, filename)
    aug.load()
    return aug


def ensure_directive(aug, vhost, key, value):
    match = aug.match('/files//VirtualHost[directive="ServerName" and directive/arg="%(vhost)s"]/'
                      '*[self::directive="%(key)s"]' % locals())
    if len(match) == 0:
        aug.set('/files//VirtualHost[directive="ServerName" and directive/arg="%(vhost)s"]/directive[last()+1]'
                % locals(),
                key)
    aug.set('/files//VirtualHost[directive="ServerName" and directive/arg="%(vhost)s"]/'
            '*[self::directive="%(key)s"]/arg' % locals(),
            value)


def ensure_proxy_pass_exists(aug, vhost, src, dest):
    existing = aug.match('/files//VirtualHost[directive="ServerName" and directive/arg="%(vhost)s"]/'
                         '*[self::directive="ProxyPass"][arg[1] = "%(src)s" and arg[2] = "%(dest)s"]' % locals())
    #Ensure some basic mod_proxy config is enabled for the vhost:
    ensure_directive(aug, vhost, "ProxyRequests", "Off")
    ensure_directive(aug, vhost, "ProxyPreserveHost", "On")
    ensure_directive(aug, vhost, "ProxyVia", "full")

    if len(existing) == 0:
        aug.set(
            '/files//VirtualHost[directive="ServerName" and directive/arg="%(vhost)s"]/directive[last()+1]'
            % locals(),
            "ProxyPass")
        aug.set(
            '/files//VirtualHost[directive="ServerName" and directive/arg="%(vhost)s"]/directive[last()]/arg[1]'
            % locals(),
            src)
        aug.set(
            '/files//VirtualHost[directive="ServerName" and directive/arg="%(vhost)s"]/directive[last()]/arg[2]'
            % locals(),
            dest)

    existing = aug.match('/files//VirtualHost[directive="ServerName" and directive/arg="%(vhost)s"]/'
                         '*[self::directive="ProxyPassReverse"][arg[1] = "%(src)s" and arg[2] = "%(dest)s"]' % locals())

    if len(existing) == 0 and dest.startswith('http'):
        aug.set(
            ('/files//VirtualHost[directive="ServerName" and directive/arg="%(vhost)s"]/directive[last()+1]'
             % locals()),
            "ProxyPassReverse")
        aug.set(
            ('/files//VirtualHost[directive="ServerName" and directive/arg="%(vhost)s"]/directive[last()]/arg[1]'
             % locals()),
            src)
        aug.set(
            ('/files//VirtualHost[directive="ServerName" and directive/arg="%(vhost)s"]/directive[last()]/arg[2]'
             % locals()),
            dest)


def remove_proxy_pass(aug, vhost, src, dest):
    aug.remove('/files//VirtualHost[directive="ServerName" and directive/arg="%(vhost)s"]/'
               '*[self::directive="ProxyPass"][arg[1] = "%(src)s" and arg[2] = "%(dest)s"]' % locals())
    aug.remove('/files//VirtualHost[directive="ServerName" and directive/arg="%(vhost)s"]/'
               '*[self::directive="ProxyPassReverse"][arg[1] = "%(src)s" and arg[2] = "%(dest)s"]' % locals())


def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True),
            src=dict(required=True),
            dest=dict(required=True),
            state=dict(default="present", choices=["absent", "present"]),
        ),
        supports_check_mode=True
    )

    vhost = module.params["name"]
    src = module.params["src"]
    dest = module.params["dest"]
    state = module.params["state"]

    try:
        aug = load_augeas_for_file()
    except Exception, e:
        module.fail_json(msg="unable to connect to Augeas: %s" % e)
        return

    try:
        if state == 'present':
            ensure_proxy_pass_exists(aug, vhost, src, dest)
        elif state == 'absent':
            remove_proxy_pass(aug, vhost, src, dest)
            module.fail_json(msg="state=absent is not implemented yet" % locals())
            return
    except Exception, e:
        module.fail_json(msg="an error occured while making changes: %s" % e)
        return

    try:
        aug.save()
        saved = aug.get("/augeas/events/saved")
        errors = aug.get("/augeas//errors")
        aug.close()
        changed = True if saved else False
        module.exit_json(changed=True if saved else False, name=vhost, saved=saved, errors=errors)
    except Exception, e:
        module.fail_json(msg="exception while performing augeas operations: %s" % e)

# import module snippets
from ansible.module_utils.basic import *

main()
